[selections]

# pT and eta cuts are already applied at trig match level, so they are not needed here
# dau1_pt > 25 && abs(dau1_eta) < 2.1 && dau2_pt > 25 && abs(dau2_eta) < 2.1
baseline               = pairType == 2 && nleps == 0 && nbjetscand > 1
baselineVBFtight       = pairType == 2 && nleps == 0 && nbjetscand > 1 && isVBFtrigger == 1 && VBFjj_mass > 800 && VBFjet1_pt > 140 && VBFjet2_pt > 60
baseline55             = baseline, tauH_SVFIT_mass > 55
baselineVBFloose       = baseline, isVBF == 1 && VBFjj_mass > 500 && VBFjj_deltaEta > 3 && ((isVBFtrigger == 1 && VBFjj_mass > 800 && VBFjet1_pt > 140 && VBFjet2_pt > 60) || isVBFtrigger==0)


# btag requirements - DeepFlavor WPs={0.0494, 0.2770, 0.7264}; // L,M,T -- Legacy 2018 DeepFlavor
btagL        = (bjet1_bID_deepFlavor > 0.0494 && bjet2_bID_deepFlavor < 0.0494) || (bjet1_bID_deepFlavor < 0.0494 && bjet2_bID_deepFlavor > 0.0494) #only 1 jet with loose btag working point
btagM        = (bjet1_bID_deepFlavor > 0.2770 && bjet2_bID_deepFlavor < 0.2770) || (bjet1_bID_deepFlavor < 0.2770 && bjet2_bID_deepFlavor > 0.2770) #only 1 jet with medium btag working point
btagMfirst   = (bjet1_bID_deepFlavor > 0.2770) || (bjet2_bID_deepFlavor > 0.2770)                                                                   #at least 1 jet with medium btag working point
btagLL       = bjet1_bID_deepFlavor > 0.0494 && bjet2_bID_deepFlavor > 0.0494 #both jets with loose btag working point
btagMM       = bjet1_bID_deepFlavor > 0.2770 && bjet2_bID_deepFlavor > 0.2770 #both jets with medium btag working point
nobtagMM     = bjet1_bID_deepFlavor < 0.2770 && bjet2_bID_deepFlavor < 0.2770 #both jets NOT btagged (medium working point)


massCut      = bH_mass_raw > 80 && bH_mass_raw < 160 && tauH_SVFIT_mass > 80 && tauH_SVFIT_mass < 160
massCutCent  = tauH_SVFIT_mass > 79.5 && tauH_SVFIT_mass < 152.5 && bH_mass_raw > 74.5 && bH_mass_raw < 147.5
boostMassCut = tauH_SVFIT_mass > 79.5 && tauH_SVFIT_mass < 152.5 && fatjet_softdropMass > 90 && fatjet_softdropMass < 160
ellypsMassCut  = ((tauH_SVFIT_mass-116.)*(tauH_SVFIT_mass-116.))/(35.*35.) + ((bH_mass_raw-111.)*(bH_mass_raw-111.))/(45.*45.) <  1.0 # mass cut centered on the Hbb Htt masses, applied in the final selections
circMassCut  = TMath::Sqrt((tauH_SVFIT_mass-116.)*(tauH_SVFIT_mass-116.) + (bH_mass_raw-111.)*(bH_mass_raw-111.)) <  40.0
massCutHbb = bH_mass_raw > 66 && bH_mass_raw < 156
massCutHtt = tauH_SVFIT_mass > 81 && tauH_SVFIT_mass < 151

# updated mass cuts to be used with DNN 2020-07-31 (both ellyptical)
# https://github.com/GilesStrong/cms_runII_dnn_models#mass-cuts
boostMassCut2  = ((tauH_SVFIT_mass-128.)*(tauH_SVFIT_mass-128.))/(60.*60.) + ((bH_mass_raw-159.)*(bH_mass_raw-159.))/(94.*94.)   <  1.0
ellypsMassCut2 = ((tauH_SVFIT_mass-129.)*(tauH_SVFIT_mass-129.))/(53.*53.) + ((bH_mass_raw-169.)*(bH_mass_raw-169.))/(145.*145.) <  1.0


# ABCD regions used in the analysis - DeepTau
SR           = isOS != 0 && dau1_deepTauVsJet >= 5 && dau2_deepTauVsJet >= 5                   # signal region: opposite sign, isolated taus
SStight      = isOS == 0 && dau1_deepTauVsJet >= 5 && dau2_deepTauVsJet >= 5			       # B region
OSrlx        = isOS != 0 && dau1_deepTauVsJet >= 5 && dau2_deepTauVsJet >= 2
SSrlx        = isOS == 0 && dau1_deepTauVsJet >= 5 && dau2_deepTauVsJet >= 2			       # B' region
OSinviso     = isOS != 0 && dau1_deepTauVsJet >= 5 && dau2_deepTauVsJet >= 2 && dau2_deepTauVsJet < 5   # C region
SSinviso     = isOS == 0 && dau1_deepTauVsJet >= 5 && dau2_deepTauVsJet >= 2 && dau2_deepTauVsJet < 5   # D region


# final categories - Run2 Legacy (including VBF category)
s1b1jresolvedMcut = baseline , btagM , isBoosted != 1 , ellypsMassCut2, !(isVBF == 1 && VBFjj_mass > 500 && VBFjj_deltaEta > 3 && ((isVBFtrigger == 1 && VBFjj_mass > 800 && VBFjet1_pt > 140 && VBFjet2_pt > 60) || isVBFtrigger==0) && (bjet1_bID_deepFlavor > 0.2770 || bjet2_bID_deepFlavor > 0.2770) )
s2b0jresolvedMcut = baseline , btagMM, isBoosted != 1 , ellypsMassCut2, !(isVBF == 1 && VBFjj_mass > 500 && VBFjj_deltaEta > 3 && ((isVBFtrigger == 1 && VBFjj_mass > 800 && VBFjet1_pt > 140 && VBFjet2_pt > 60) || isVBFtrigger==0) && (bjet1_bID_deepFlavor > 0.2770 || bjet2_bID_deepFlavor > 0.2770) )
sboostedLLMcut    = baseline , btagLL, isBoosted == 1 , boostMassCut2 , !(isVBF == 1 && VBFjj_mass > 500 && VBFjj_deltaEta > 3 && ((isVBFtrigger == 1 && VBFjj_mass > 800 && VBFjet1_pt > 140 && VBFjet2_pt > 60) || isVBFtrigger==0) && (bjet1_bID_deepFlavor > 0.2770 || bjet2_bID_deepFlavor > 0.2770) )


# VBF category
VBFloose     = baselineVBFloose, btagMfirst
VBFlooseMcut = VBFloose, ellypsMassCut
VBFtight     = baselineVBFtight, btagMfirst
VBFtightMcut = VBFtight, ellypsMassCut


# VBF "multi-categories"
mpp_ggf_v1    = (mdnn__v1__kl1_c2v1_c31__hh_ggf > mdnn__v1__kl1_c2v1_c31__hh_vbf) && (mdnn__v1__kl1_c2v1_c31__hh_ggf > mdnn__v1__kl1_c2v1_c31__tth)    && (mdnn__v1__kl1_c2v1_c31__hh_ggf > mdnn__v1__kl1_c2v1_c31__tt_lep) && (mdnn__v1__kl1_c2v1_c31__hh_ggf > mdnn__v1__kl1_c2v1_c31__tt_fh)  && (mdnn__v1__kl1_c2v1_c31__hh_ggf > mdnn__v1__kl1_c2v1_c31__dy)
mpp_vbf_v1    = (mdnn__v1__kl1_c2v1_c31__hh_vbf > mdnn__v1__kl1_c2v1_c31__hh_ggf) && (mdnn__v1__kl1_c2v1_c31__hh_vbf > mdnn__v1__kl1_c2v1_c31__tth)    && (mdnn__v1__kl1_c2v1_c31__hh_vbf > mdnn__v1__kl1_c2v1_c31__tt_lep) && (mdnn__v1__kl1_c2v1_c31__hh_vbf > mdnn__v1__kl1_c2v1_c31__tt_fh)  && (mdnn__v1__kl1_c2v1_c31__hh_vbf > mdnn__v1__kl1_c2v1_c31__dy)
mpp_tth_v1    = (mdnn__v1__kl1_c2v1_c31__tth    > mdnn__v1__kl1_c2v1_c31__hh_ggf) && (mdnn__v1__kl1_c2v1_c31__tth    > mdnn__v1__kl1_c2v1_c31__hh_vbf) && (mdnn__v1__kl1_c2v1_c31__tth    > mdnn__v1__kl1_c2v1_c31__tt_lep) && (mdnn__v1__kl1_c2v1_c31__tth    > mdnn__v1__kl1_c2v1_c31__tt_fh)  && (mdnn__v1__kl1_c2v1_c31__tth    > mdnn__v1__kl1_c2v1_c31__dy)
mpp_ttlep_v1  = (mdnn__v1__kl1_c2v1_c31__tt_lep > mdnn__v1__kl1_c2v1_c31__hh_ggf) && (mdnn__v1__kl1_c2v1_c31__tt_lep > mdnn__v1__kl1_c2v1_c31__hh_vbf) && (mdnn__v1__kl1_c2v1_c31__tt_lep > mdnn__v1__kl1_c2v1_c31__tth)    && (mdnn__v1__kl1_c2v1_c31__tt_lep > mdnn__v1__kl1_c2v1_c31__tt_fh)  && (mdnn__v1__kl1_c2v1_c31__tt_lep > mdnn__v1__kl1_c2v1_c31__dy)
mpp_tthad_v1  = (mdnn__v1__kl1_c2v1_c31__tt_fh  > mdnn__v1__kl1_c2v1_c31__hh_ggf) && (mdnn__v1__kl1_c2v1_c31__tt_fh  > mdnn__v1__kl1_c2v1_c31__hh_vbf) && (mdnn__v1__kl1_c2v1_c31__tt_fh  > mdnn__v1__kl1_c2v1_c31__tth)    && (mdnn__v1__kl1_c2v1_c31__tt_fh  > mdnn__v1__kl1_c2v1_c31__tt_lep) && (mdnn__v1__kl1_c2v1_c31__tt_fh  > mdnn__v1__kl1_c2v1_c31__dy)
mpp_dy_v1     = (mdnn__v1__kl1_c2v1_c31__dy     > mdnn__v1__kl1_c2v1_c31__hh_ggf) && (mdnn__v1__kl1_c2v1_c31__dy     > mdnn__v1__kl1_c2v1_c31__hh_vbf) && (mdnn__v1__kl1_c2v1_c31__dy     > mdnn__v1__kl1_c2v1_c31__tth)    && (mdnn__v1__kl1_c2v1_c31__dy     > mdnn__v1__kl1_c2v1_c31__tt_lep) && (mdnn__v1__kl1_c2v1_c31__dy     > mdnn__v1__kl1_c2v1_c31__tt_fh)

mpp_ggf_v2    = (mdnn__v2__kl1_c2v1_c31__hh_ggf > mdnn__v2__kl1_c2v1_c31__hh_vbf) && (mdnn__v2__kl1_c2v1_c31__hh_ggf > mdnn__v2__kl1_c2v1_c31__tth)    && (mdnn__v2__kl1_c2v1_c31__hh_ggf > mdnn__v2__kl1_c2v1_c31__tt_lep) && (mdnn__v2__kl1_c2v1_c31__hh_ggf > mdnn__v2__kl1_c2v1_c31__tt_fh)  && (mdnn__v2__kl1_c2v1_c31__hh_ggf > mdnn__v2__kl1_c2v1_c31__dy)
mpp_vbf_v2    = (mdnn__v2__kl1_c2v1_c31__hh_vbf > mdnn__v2__kl1_c2v1_c31__hh_ggf) && (mdnn__v2__kl1_c2v1_c31__hh_vbf > mdnn__v2__kl1_c2v1_c31__tth)    && (mdnn__v2__kl1_c2v1_c31__hh_vbf > mdnn__v2__kl1_c2v1_c31__tt_lep) && (mdnn__v2__kl1_c2v1_c31__hh_vbf > mdnn__v2__kl1_c2v1_c31__tt_fh)  && (mdnn__v2__kl1_c2v1_c31__hh_vbf > mdnn__v2__kl1_c2v1_c31__dy)
mpp_tth_v2    = (mdnn__v2__kl1_c2v1_c31__tth    > mdnn__v2__kl1_c2v1_c31__hh_ggf) && (mdnn__v2__kl1_c2v1_c31__tth    > mdnn__v2__kl1_c2v1_c31__hh_vbf) && (mdnn__v2__kl1_c2v1_c31__tth    > mdnn__v2__kl1_c2v1_c31__tt_lep) && (mdnn__v2__kl1_c2v1_c31__tth    > mdnn__v2__kl1_c2v1_c31__tt_fh)  && (mdnn__v2__kl1_c2v1_c31__tth    > mdnn__v2__kl1_c2v1_c31__dy)
mpp_ttlep_v2  = (mdnn__v2__kl1_c2v1_c31__tt_lep > mdnn__v2__kl1_c2v1_c31__hh_ggf) && (mdnn__v2__kl1_c2v1_c31__tt_lep > mdnn__v2__kl1_c2v1_c31__hh_vbf) && (mdnn__v2__kl1_c2v1_c31__tt_lep > mdnn__v2__kl1_c2v1_c31__tth)    && (mdnn__v2__kl1_c2v1_c31__tt_lep > mdnn__v2__kl1_c2v1_c31__tt_fh)  && (mdnn__v2__kl1_c2v1_c31__tt_lep > mdnn__v2__kl1_c2v1_c31__dy)
mpp_tthad_v2  = (mdnn__v2__kl1_c2v1_c31__tt_fh  > mdnn__v2__kl1_c2v1_c31__hh_ggf) && (mdnn__v2__kl1_c2v1_c31__tt_fh  > mdnn__v2__kl1_c2v1_c31__hh_vbf) && (mdnn__v2__kl1_c2v1_c31__tt_fh  > mdnn__v2__kl1_c2v1_c31__tth)    && (mdnn__v2__kl1_c2v1_c31__tt_fh  > mdnn__v2__kl1_c2v1_c31__tt_lep) && (mdnn__v2__kl1_c2v1_c31__tt_fh  > mdnn__v2__kl1_c2v1_c31__dy)
mpp_dy_v2     = (mdnn__v2__kl1_c2v1_c31__dy     > mdnn__v2__kl1_c2v1_c31__hh_ggf) && (mdnn__v2__kl1_c2v1_c31__dy     > mdnn__v2__kl1_c2v1_c31__hh_vbf) && (mdnn__v2__kl1_c2v1_c31__dy     > mdnn__v2__kl1_c2v1_c31__tth)    && (mdnn__v2__kl1_c2v1_c31__dy     > mdnn__v2__kl1_c2v1_c31__tt_lep) && (mdnn__v2__kl1_c2v1_c31__dy     > mdnn__v2__kl1_c2v1_c31__tt_fh)

# replace v1 <-> v2 depending on which training is being used
GGFclass    = VBFloose, mpp_ggf_v2
VBFclass    = VBFloose, mpp_vbf_v2
ttHclass    = VBFloose, mpp_tth_v2
TTlepclass  = VBFloose, mpp_ttlep_v2
TThadclass  = VBFloose, mpp_tthad_v2
DYclass     = VBFloose, mpp_dy_v2


#########################################################################
#########################################################################

## weights to be applied for a certain selections when calling Fill()
## multiple weights are passed as list and are multiplied together
## NOTE: no weight is applied for data (the simple Fill() is used)
[selectionWeights]
# WEIGHTS WHEN USING THE MD_IDSF -> to be used always when the IDSF have been calculated
# in these three there should also be FakeRateSF_deep = 1, but we do not have it in the SKIMS so we skip it and the result is exactly the same
#baseline         = MC_weight, PUReweight, trigSF, DYscale_MTT, FakeRateSF_deep
#baselineHTauTau  = MC_weight, PUReweight, trigSF, DYscale_MTT, FakeRateSF_deep
#baselineVBFtight  = MC_weight, PUReweight, VBFtrigSF, DYscale_MTT, FakeRateSF_deep

# WEIGHTS WHEN USING THE tauPOG SUGGESTIONS -> it can create some trouble
baseline         = MC_weight, PUReweight, L1pref_weight, trigSF, IdAndIsoAndFakeSF_deep_pt, DYscale_MTT, prescaleWeight, PUjetID_SF
baselineHTauTau  = MC_weight, PUReweight, trigSF, IdAndIsoAndFakeSF_deep, DYscale_MTT
baselineVBFtight = MC_weight, PUReweight, L1pref_weight, trigSF, IdAndIsoAndFakeSF_deep_pt, DYscale_MTT, prescaleWeight, PUjetID_SF


# remove DY weights, they are already taken into account in baseline weights
btagLL   = bTagweightL
btagMM   = bTagweightM
nobtagMM = bTagweightM
btagL    = bTagweightL
btagM    = bTagweightM
btagMfirst    = bTagweightM

[selectionWeights_ext] # beta feature! use with care!
#weights decay mode dependent computed with QCD backgrond estimation, DY LO weights, old DY weights, on top of decay mode dependend trigger weights, m_vis > 55 #11 Mar 2019 #used for testing, already saved in the skims
#baseline = (dau1_decayMode == 0 && isTau1real): 0.97, (dau2_decayMode == 0 && isTau2real): 0.97, (dau1_decayMode == 1 && isTau1real): 1.04, (dau2_decayMode == 1 && isTau2real): 1.04, (dau1_decayMode == 10 && isTau1real): 0.90, (dau2_decayMode == 10 && isTau2real): 0.90
#baselineHTauTau = (dau1_decayMode == 0 && isTau1real): 0.97, (dau2_decayMode == 0 && isTau2real): 0.97, (dau1_decayMode == 1 && isTau1real): 1.04, (dau2_decayMode == 1 && isTau2real): 1.04, (dau1_decayMode == 10 && isTau1real): 0.90, (dau2_decayMode == 10 && isTau2real): 0.90

#weights decay mode dependent computed with QCD backgrond + fakeTaus estimation, DY LO weights, old DY weights, on top of decay mode dependend trigger weights, m_vis > 55 #11 Mar 2019
#baseline = (dau1_decayMode == 0 && isTau1real): 1.05, (dau2_decayMode == 0 && isTau2real): 1.05, (dau1_decayMode == 1 && isTau1real): 1.04, (dau2_decayMode == 1 && isTau2real): 1.04, (dau1_decayMode == 10 && isTau1real): 0.88, (dau2_decayMode == 10 && isTau2real): 0.88
#baselineHTauTau = (dau1_decayMode == 0 && isTau1real): 1.05, (dau2_decayMode == 0 && isTau2real): 1.05, (dau1_decayMode == 1 && isTau1real): 1.04, (dau2_decayMode == 1 && isTau2real): 1.04, (dau1_decayMode == 10 && isTau1real): 0.88, (dau2_decayMode == 10 && isTau2real): 0.88

#weights decay mode dependent computed with QCD backgrond estimation, DY NLO weights, Pisa`s DY weights, on top of decay mode dependend trigger weights, m_vis > 55 #30 Apr 2019
#baseline = (dau1_decayMode == 0 && isTau1real): 1.12, (dau2_decayMode == 0 && isTau2real): 1.12, (dau1_decayMode == 1 && isTau1real): 1.06, (dau2_decayMode == 1 && isTau2real): 1.06, (dau1_decayMode == 10 && isTau1real): 0.87, (dau2_decayMode == 10 && isTau2real): 0.87
#baselineHTauTau = (dau1_decayMode == 0 && isTau1real): 1.12, (dau2_decayMode == 0 && isTau2real): 1.12, (dau1_decayMode == 1 && isTau1real): 1.06, (dau2_decayMode == 1 && isTau2real): 1.06, (dau1_decayMode == 10 && isTau1real): 0.87, (dau2_decayMode == 10 && isTau2real): 0.87

#weights decay mode dependent computed with QCD backgrond estimation, DY LO weights, Pisa`s DY weights, on top of decay mode dependend trigger weights, m_vis > 55 #30 Apr 2019
#baseline = (dau1_decayMode == 0 && isTau1real && DYLOtoNLOreweight > -1): 1.02, (dau2_decayMode == 0 && isTau2real && DYLOtoNLOreweight > -1): 1.02, (dau1_decayMode == 1 && isTau1real&& DYLOtoNLOreweight > -1): 1.09, (dau2_decayMode == 1 && isTau2real && DYLOtoNLOreweight > -1): 1.09, (dau1_decayMode == 10 && isTau1real && DYLOtoNLOreweight > -1): 0.93, (dau2_decayMode == 10 && isTau2real && DYLOtoNLOreweight > -1): 0.93
#baselineHTauTau =(dau1_decayMode == 0 && isTau1real && DYLOtoNLOreweight > -1): 1.02, (dau2_decayMode == 0 && isTau2real && DYLOtoNLOreweight > -1): 1.02, (dau1_decayMode == 1 && isTau1real && DYLOtoNLOreweight > -1): 1.09, (dau2_decayMode == 1 && isTau2real && DYLOtoNLOreweight > -1): 1.09, (dau1_decayMode == 10 && isTau1real && DYLOtoNLOreweight > -1): 0.93, (dau2_decayMode == 10 && isTau2real && DYLOtoNLOreweight > -1): 0.93

#baseline = (dau1_decayMode == 0 && isTau1real ): 1.02, (dau2_decayMode == 0 && isTau2real ): 1.02, (dau1_decayMode == 1 && isTau1real): 1.09, (dau2_decayMode == 1 && isTau2real ): 1.09, (dau1_decayMode == 10 && isTau1real ): 0.93, (dau2_decayMode == 10 && isTau2real ): 0.93
#baselineHTauTau =(dau1_decayMode == 0 && isTau1real ): 1.02, (dau2_decayMode == 0 && isTau2real ): 1.02, (dau1_decayMode == 1 && isTau1real ): 1.09, (dau2_decayMode == 1 && isTau2real ): 1.09, (dau1_decayMode == 10 && isTau1real ): 0.93, (dau2_decayMode == 10 && isTau2real ): 0.93

#baselineHTauTauVBFtight =(dau1_decayMode == 0 && isTau1real ): 1.02, (dau2_decayMode == 0 && isTau2real ): 1.02, (dau1_decayMode == 1 && isTau1real ): 1.09, (dau2_decayMode == 1 && isTau2real ): 1.09, (dau1_decayMode == 10 && isTau1real ): 0.93, (dau2_decayMode == 10 && isTau2real ): 0.93
#baselineVBFtight =(dau1_decayMode == 0 && isTau1real ): 1.02, (dau2_decayMode == 0 && isTau2real ): 1.02, (dau1_decayMode == 1 && isTau1real ): 1.09, (dau2_decayMode == 1 && isTau2real ): 1.09, (dau1_decayMode == 10 && isTau1real ): 0.93, (dau2_decayMode == 10 && isTau2real ): 0.93

# tauIDSF 14/19Feb2020
#baseline = (dau1_decayMode == 0 && isTau1real ): 1.052, (dau2_decayMode == 0 && isTau2real ): 1.052, (dau1_decayMode == 1 && isTau1real): 1.037, (dau2_decayMode == 1 && isTau2real ): 1.037, (dau1_decayMode == 10 && isTau1real ): 0.820, (dau2_decayMode == 10 && isTau2real ): 0.820, (dau1_decayMode == 11 && isTau1real ): 1.451, (dau2_decayMode == 11 && isTau2real ): 1.451

# tauIDSF 8May2020
#baseline = (dau1_decayMode == 0 && isTau1real ): 1.182, (dau2_decayMode == 0 && isTau2real ): 1.182, (dau1_decayMode == 1 && isTau1real): 1.146, (dau2_decayMode == 1 && isTau2real ): 1.146, (dau1_decayMode == 10 && isTau1real ): 1.149, (dau2_decayMode == 10 && isTau2real ): 1.149, (dau1_decayMode == 11 && isTau1real ): 0.811, (dau2_decayMode == 11 && isTau2real ): 0.811

#########################################################################
#########################################################################

[sampleWeights]
TTfullyHad = TTtopPtreweight#, IdAndIsoSF
TTfullyLep = TTtopPtreweight#, IdAndIsoSF
TTsemiLep  = TTtopPtreweight#, IdAndIsoSF
#DY = DYLOtoNLOreweight


#########################################################################
#########################################################################


# define alternative weights to be tested instead of the nominal one
[systematics]
TTtopPtreweight      = topUp:TTtopPtreweight_up , topDown:TTtopPtreweight_down
trigSF_DM0           = trigSFDM0Up:trigSF_DM0_up , trigSFDM0Down:trigSF_DM0_down
trigSF_DM1           = trigSFDM1Up:trigSF_DM1_up , trigSFDM1Down:trigSF_DM1_down
trigSF_DM10          = trigSFDM10Up:trigSF_DM10_up , trigSFDM10Down:trigSF_DM10_down
trigSF_DM11          = trigSFDM11Up:trigSF_DM11_up , trigSFDM11Down:trigSF_DM11_down
tauid_pt20to25       = tauid_pt20to25Up:idAndIsoAndFakeSF_tauid_pt20to25_up   , tauid_pt20to25Down:idAndIsoAndFakeSF_tauid_pt20to25_down
tauid_pt25to30       = tauid_pt25to30Up:idAndIsoAndFakeSF_tauid_pt25to30_up   , tauid_pt25to30Down:idAndIsoAndFakeSF_tauid_pt25to30_down
tauid_pt30to35       = tauid_pt30to35Up:idAndIsoAndFakeSF_tauid_pt30to35_up   , tauid_pt30to35Down:idAndIsoAndFakeSF_tauid_pt30to35_down
tauid_pt35to40       = tauid_pt35to40Up:idAndIsoAndFakeSF_tauid_pt35to40_up   , tauid_pt35to40Down:idAndIsoAndFakeSF_tauid_pt35to40_down
tauid_pt40toInf      = tauid_pt40toInfUp:idAndIsoAndFakeSF_tauid_pt40toInf_up , tauid_pt40toInfDown:idAndIsoAndFakeSF_tauid_pt40toInf_down
mutauFR_etaLt0p4     = mutauFR_etaLt0p4Up:idAndIsoAndFakeSF_mutauFR_etaLt0p4_up       , mutauFR_etaLt0p4Down:idAndIsoAndFakeSF_mutauFR_etaLt0p4_down
mutauFR_eta0p4to0p8  = mutauFR_eta0p4to0p8Up:idAndIsoAndFakeSF_mutauFR_eta0p4to0p8_up , mutauFR_eta0p4to0p8Down:idAndIsoAndFakeSF_mutauFR_eta0p4to0p8_dowm
mutauFR_eta0p8to1p2  = mutauFR_eta0p8to1p2Up:idAndIsoAndFakeSF_mutauFR_eta0p8to1p2_up , mutauFR_eta0p8to1p2Down:idAndIsoAndFakeSF_mutauFR_eta0p8to1p2_dowm
mutauFR_eta1p2to1p7  = mutauFR_eta1p2to1p7Up:idAndIsoAndFakeSF_mutauFR_eta1p2to1p7_up , mutauFR_eta1p2to1p7Down:idAndIsoAndFakeSF_mutauFR_eta1p2to1p7_dowm
mutauFR_etaGt1p7     = mutauFR_etaGt1p7Up:idAndIsoAndFakeSF_mutauFR_etaGt1p7_up       , mutauFR_etaGt1p7Down:idAndIsoAndFakeSF_mutauFR_etaGt1p7_down
etauFR_barrel        = etauFR_barrelUp:idAndIsoAndFakeSF_etauFR_barrel_up , etauFR_barrelDown:idAndIsoAndFakeSF_etauFR_barrel_down
etauFR_endcap        = etauFR_endcapUp:idAndIsoAndFakeSF_etauFR_endcap_up , etauFR_endcapDown:idAndIsoAndFakeSF_etauFR_endcap_down

#########################################################################
#########################################################################

# ROOT-like definition of the binning
[histos]

BDToutSM_kl_1            = 1000000,-1,1
DNNoutSM_kl_1            = 500000,0,1
